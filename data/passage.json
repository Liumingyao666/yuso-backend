{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1703014128530092034",
        "title": "JavaScript-Vue",
        "description": null,
        "content": "# 前端视图开发:\n\nhtml 标签 +css 样式 + js 交互\n\n### 前端给后端传数据:注册页面\n\n1. 用户在表单中修改数据(修改视图 View)\n2. 视图改变后,会同时改变js中的数据 (修改Model模型)\n3. 直接将js中的数据传给后端 (修改Controller控制器)\n\n### 前端展示后端数据:学生列表\n\n1. 将后端的数据传入到js data中(修改Model模型)\n2. 前端页面上有一个空的表格来获取data中的数据(修改视图View)\n\n# Vue 入门总结\n\n## 1. Vue的基本使用\n\n### 1.1 Vue的基本使用\n\n1. 引入vue.js文件\n2. 创建Vue实例\n3. 挂载到某个元素上\n4. 使用Vue的语法\n5. 使用Vue的指令\n\n### 1.2 Vue的指令\n\n1. 插值表达式: `{{}} 替换文本内容`\n\n2. v-bind: 单项数据绑定 v-bind:属性名=\"数据\"\n    ```html\n    <div id=\"app\">\n        <img v-bind:src=\"imgUrl\" alt=\"\">\n    </div>\n    \n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                imgUrl: 'https://www.baidu.com/img/bd_logo1.png'\n            }\n        })\n    </script>\n    ```\n3. v-on: 事件绑定 v-on:事件名=\"函数名\"\n    ```html\n    <div id=\"app\">\n        <button v-on:click=\"btnClick\">按钮</button>\n    </div>\n    \n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                imgUrl: 'https://www.baidu.com/img/bd_logo1.png'\n            },\n            methods: {\n                btnClick: function () {\n                    console.log('按钮被点击了')\n                }\n            }\n        })\n    </script>\n    ```\n4. v-if 和 v-show 的区别\n    - v-if: 控制元素的显示和隐藏, 如果为false, 元素会被移除\n    - v-show: 控制元素的显示和隐藏, 如果为false, 元素会被隐藏\n\n```html\n    <div id=\"app\">\n        <button v-on:click=\"btnClick\">按钮</button>\n        <div v-if=\"isShow\">显示</div>\n        <div v-show=\"isShow\">显示</div>\n    </div>\n    \n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                isShow: true\n            },\n            methods: {\n                btnClick: function () {\n                    this.isShow = !this.isShow\n                }\n            }\n        })\n    </script>\n    ```\n5. v-for: 循环遍历\n    ```html\n    <div id=\"app\">\n        <ul>\n            <li v-for=\"item in list\">{{item}}</li>\n        </ul>\n        \n        <table>\n            <tr>\n                <th>姓名</th>\n                <th>年龄</th>\n            </tr>\n            <tr v-for=\"stu in students\">\n<!--            <td>{{stu.name}}</td>-->\n<!--            <td>{{stu.age}}</td>-->\n            <td v-for=\"value in stu\">{{value}}</td>\n<!--            <td v-for=\"(value,key,index) in stu\">{{value}}</td>-->\n        </tr>\n            \n        </table>\n    </div>\n\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                list: ['a', 'b', 'c'],\n                students: [\n                    {name: '张三', age: 18},\n                    {name: '李四', age: 19},\n                    {name: '王五', age: 20},\n                ]\n            }\n        })\n    </script>\n    ```\n6. v-model: 双向数据绑定\n    ```html\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"message\">\n        <p>{{message}}</p>\n    </div>\n\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                message: 'hello world'\n            }\n        })\n    </script>\n    ```\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 13,
        "thumbNum": 1,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-16T11:53:03.000+00:00",
        "updateTime": "2023-09-16T20:46:37.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "Vue",
          "NodeJS"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1702692506019426306",
        "title": "Node.js",
        "description": "初步认识 Node.js",
        "content": "# Node.js\n##使用步骤\n##### nvm Node管理器\n`nvm`：`node` 版本管理器，也就是说：一个 `nvm` 可以管理多个 `node` 版本（包含 `npm` 与 `npx`），可以方便快捷的 安装、切换 不同版本的 `node`。\n可以在配置文件中中更改淘宝镜像地址: `nvm node_mirror 镜像地址`\n##### 安装Node\n`node`：是一个基于 `Chrome V8` 引擎的 `JS` 运行环境。\n语法`nvm install 版本号`\n\n### 安装CNPM,Yarn,PnPm\n`cnpm`：是 `npm` 的淘宝镜像，可以方便快捷的安装 `npm` 包。\n`yarn`：是 `Facebook` 推出的新一代包管理工具，可以方便快捷的安装 `npm` 包。\n`pnpm`：是 `npm` 的增强版，可以方便快捷的安装 `npm` 包。\n语法`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n语法`npm install -g yarn`\n语法`npm install -g pnpm`\n## 模块化\n#### 为什么要模块化\n- 请求过多（页面复杂度高，依赖的文件多因此请求也就增加了）\n- 依赖模糊（当依赖文件过多时，很难去分辨到底谁依赖了谁）\n- 命名空间污染（一个 js 文件被引入以后，其中所有变量/函数都可以被外部访问，多个文件相同的变量/函数名会冲突）\n- 由于以上的一系列原因会导致维护性变得非常差，因此我们需要模块化来解决这些问题。\n### CommonJS\n```html\n<script>\n  // 暴露模块\n  module.exports = value\n  exports.xxx = value\n  // 引入模块\n  var module = require(模块名或模块路径)\n</script>\n```\n\n### ES6 模块化\n```html\n<script type=\"module\">\n  // 暴露模块\n  export var xxx = value\n  export function xxx(){}\n  export default value\n  // 引入模块\n  import * as module from '模块名或模块路径'\n  import {xxx, yyy as alias} from '模块名或模块路径'\n  import value from '模块名或模块路径'\n</script>\n```\n\n\n## Webpack\n### 安装\n语法`npm install webpack webpack-cli -g`\n### 打包模块js 文件\n语法`webpack ./src/main.js -o ./dist/bundle.js --mode=development`\n### webpack.config.js\n```js\nconst path = require('path')\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n    publicPath: 'dist/'\n  },\n  mode: 'development'\n}\n```\n\n\n\n\n\n\n### 热部署\n安装依赖包`npm install webpack-dev-server -D`\n修改配置文件\n```html\n\"scripts\": {\n    \"build\": \"webpack-dev-server --config webpack.config.js --open --port 3000 --hot\"\n}\n\n- --open 自动打开浏览器\n- --port 服务监听的端口 3000\n- --hot  文件变动后自动更新\n```\n语法`npm install webpack-dev-server -g`\n\n#### html-webpack-plugin 插件\n安装依赖包`npm install html-webpack-plugin -D`\n修改配置文件\n```js\nconst path = require('path')\nconst htmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n    // publicPath: 'dist/'\n  },\n  mode: 'development',\n  plugins: [\n    new htmlWebpackPlugin({\n      template: 'index.html'\n    })\n  ]\n}\n```\n### css-loader\n安装依赖包`npm install css-loader -D`\n安装依赖包`npm install style-loader -D`\n修改配置文件\n```js\nconst path = require('path')\nconst htmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n    // publicPath: 'dist/'\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      template: 'index.html'\n    })\n  ]\n}\n```\n\n\n### 将js Es6语法文件转ES5语法\n```html\ncnpm install babel-core babel-loader@7.1.5 babel-plugin-transform-runtime@6.23.0 babel-preset-env@1.7.0 babel-preset-stage-0@6.24.1 -D\n```\n\n修改配置文件\n```js\nconst path = require('path')\nconst htmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n    // publicPath: 'dist/'\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /\\.js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['env'],\n            plugins: ['transform-runtime']\n          }\n        }\n      }\n    ]\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      template: 'index.html'\n    })\n  ]\n}\n```",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 7,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-15T14:35:02.000+00:00",
        "updateTime": "2023-09-16T16:18:04.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "NodeJS"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1702121864593272834",
        "title": "JavaScript-ES6",
        "description": "ES6新特性",
        "content": "# ES6 总结\n# let,const\n## let\n1. let声明的变量只在let命令所在的代码块内有效\n2. 避免变量提升\n3. 暂时性死区\n4. 不允许重复声明\n5. 块级作用域\n6. for循环的计数器，就很合适使用let命令\n7. 全局对象的属性\n## const\n1. const声明一个只读的常量。一旦声明，常量的值就不能改变\n2. const一旦声明变量，就必须立即初始化，不能留到以后赋值\n3. const的作用域与let命令相同：只在声明所在的块级作用域内有效\n4. const声明的常量，也与let一样不可重复声明\n5. 对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心\n\n# 模板字符串\n## 基本用法\n```javascript\nlet name = 'Bob', time = 'today';\n let a = `Hello ${name}, how are you ${time}?`\nconsole.log(a);\n```\n# 解构语法\n\n## 解构数组\n```javascript\nlet [a,b,c] = [1,2,3];\nconsole.log(a,b,c);\n````\n## 解构字符串\n```javascript\nconst [a,b,c,d,e] = 'hello';\nconsole.log(a,b,c,d,e);\n```\n\n## 解构对象\n```javascript\nlet {foo,bar} = {foo:'aaa',bar:'bbb'};\nconsole.log(foo,bar);\n```\n## 解构参数\n```javascript\nfunction add([x,y]){\n    return x+y;\n}\nconsole.log(add([1,2]));\n```\n# 对象简化\n```javascript\n//未简化\nlet name = 'Bob', time = 'today';\nlet obj = {\n    name:name,\n    time:time\n}\nconsole.log(obj);\n//简化\nlet name = 'Bob', time = 'today';\nlet obj = {\n    name,\n    time\n}\nconsole.log(obj);\n```\n# 参数默认值\n```javascript\n// 基本用法\nfunction log(x,y='World'){\n    console.log(x,y);\n}\nlog('Hello');\nlog('Hello','China');\nlog('Hello','');\n\n// 函数参数是对象时设置默认值,数组是[]，对象是{}\nfunction Point({x=0,y=0} = {}){\n    this.x = x;\n    this.y = y;\n}\nlet p = new Point();\nconsole.log(p);\n```\n\n## ...Rest\n```javascript\nfunction add(...values){\n    let sum = 0;\n    for(var val of values){\n        sum += val;\n    }\n    return sum;\n}\nconsole.log(add(2,5,3));\n```\n## 扩展运算符\n```javascript\n// 扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列\nconsole.log(...[1,2,3]);\nconsole.log(1,...[2,3,4],5);\n// 扩展运算符与正常的函数参数可以结合使用，非常灵活\nfunction f(v,w,x,y,z){\n    console.log(v,w,x,y,z);\n}\nconst args = [0,1];\nf(-1,...args,2,...[3]);\n```\n## Ajax--->promise\n```javascript\n// 传统ajax\nfunction ajax(url,successCallback,failedCallback){\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.open('GET',url,true);\n    xmlHttp.onreadystatechange = function(){\n        if(xmlHttp.readyState == 4){\n            if(xmlHttp.status == 200){\n                successCallback(xmlHttp.responseText);\n            }else{\n                failedCallback(xmlHttp.status);\n            }\n        }\n    }\n    xmlHttp.send();\n}\nfunction success(text){\n    console.log(text);\n}\nfunction failed(status){\n    console.log(status);\n}\najax('http://localhost:8080/test.json',success,failed);\n// promise\nfunction ajax(url){\n    return new Promise(function(resolve,reject){\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open('GET',url,true);\n        xmlHttp.onreadystatechange = function(){\n            if(xmlHttp.readyState == 4){\n                if(xmlHttp.status == 200){\n                    resolve(xmlHttp.responseText);\n                }else{\n                    reject(xmlHttp.status);\n                }\n            }\n        }\n        xmlHttp.send();\n    })\n}\najax('http://localhost:8080/test.json').then(function(text){\n    console.log(text);\n},function(status){\n    console.log(status);\n})\n```\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 21,
        "thumbNum": 0,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-14T00:47:31.000+00:00",
        "updateTime": "2023-09-16T14:30:33.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "Javascript"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1701432619528462338",
        "title": "JavaScript-DOM解析",
        "description": null,
        "content": "# JavaScript-DOM 操作\n\n\n## 获取属性\n在 JavaScript 中，你可以使用以下方式获取元素的属性：\n\n- `getElementById()`：通过元素的 id 获取 DOM 元素。\n- `getElementsByClassName()`：通过元素的类名获取 DOM 元素。\n- `getElementsByTagName()`：通过元素的标签名获取 DOM 元素。\n- `querySelector()`：通过 CSS 选择器获取 DOM 元素。\n- `querySelectorAll()`：通过 CSS 选择器获取所有匹配的 DOM 元素。\n\n## 操作属性\nCURD 示例\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>属性操作</title>\n    <script>\n        window.onload = function () {\n            let element = document.querySelector(\"#box\");\n            // 标准属性\n            //获取id 属性的值\n            console.log(element.id);\n            console.log(element['id']);\n            console.log(element.getAttribute('id'));\n\n            //设置id 属性的值\n            element.id = 'box2';\n            element['id'] = 'box3';\n            element.setAttribute('id', 'box4');\n\n\n            console.log('<------------------------>');\n            //自定义属性\n            // element.xxx ='xxx';\n            // element['xxx'] = 'xxx';\n            // 自定义属性的值只能通过setAttribute() 方法设置属性\n            element.setAttribute(\"xxx\", 'xxx')\n            // 自定义属性的值只能通过getAttribute() 方法获取属性\n            element.getAttribute('xxx');\n\n\n            // 操作特殊属性\n            // 1. class 属性 需要使用className, 因为class 是关键字\n            //console.log(element.class);\n            console.log(element.className);\n           // console.log(element['class']);\n            console.log(element['className']);\n            console.log(element.getAttribute('class'));\n            // 2.style 属性\n            console.log(element.style);\n            console.log(element.style.width);\n            console.log(element.style.height);\n            console.log(element.style[\"background-color\"]);\n            console.log(element.style.backgroundColor);\n            element.style.width = '300px';\n            element.style.height = '300px';\n            element.style.backgroundColor = 'blue';\n            element.style.backgroundImage = 'url(../img/1.jpg)';\n\n            // 属性名和属性值相同\n            // 有这个属性就是true, 没有就是false\n            let element1 = document.querySelector('[type=checkbox]');\n            console.log(element1.checked);\n            element1.checked = true;  // 选中\n        }\n\n    </script>\n\n</head>\n<body>\n<div id=\"box\" class=\"box\" style=\"width: 200px;height: 200px;background-color: pink\"></div>\n<input type=\"checkbox\" >\n</body>\n</html>\n```\n## NOde获取\n\n```js\n        element.firstChild; // 第一个子节点\n        element.lastChild; // 最后一个子节点\n        element.childNodes; // 所有子节点\n        element.previousSibling; // 上一个兄弟节点\n        element.nextSibling; // 下一个兄弟节点\n        element.parentNode; // 父节点\n        element.parentNode.parentNode.parentNode  //document\n```\n## Node 操作\n\nNode 操作是 JavaScript DOM 操作中的一个关键部分，它涉及到在文档对象模型中操作和管理 HTML 元素和节点。下面详细讨论 Node 操作的一些重要概念和方法：\n\n\n1. 获取元素节点\n\n   通过 getElementById 获取元素\n```javascript\nconst element = document.getElementById(\"myElement\");\n```\n通过 querySelector 获取元素\n```javascript\nconst element = document.querySelector(\".myClass\");\n```\n通过 getElementsByTagName 获取元素集合\n```javascript\nconst elements = document.getElementsByTagName(\"div\");\n```\n2. 获取文本节点\n获取元素的文本内容\n```javascript\nconst element = document.getElementById(\"myElement\");\nconst textContent = element.textContent;\n```\n3. 创建新节点\n创建元素节点\n```javascript\nconst newElement = document.createElement(\"div\");\n```\n创建文本节点\n```javascript\nconst newText = document.createTextNode(\"Hello, World!\");\n```\n4. 添加、移动和删除节点\n添加子节点\n```javascript\nconst parent = document.getElementById(\"parentElement\");\nconst child = document.getElementById(\"childElement\");\nparent.appendChild(child); // 将子节点添加到父节点中\n```\n移动节点\n```javascript\nconst target = document.getElementById(\"targetElement\");\nconst destination = document.getElementById(\"destinationElement\");\ndestination.appendChild(target); // 移动节点到新的父节点中\n```\n删除节点\n```javascript\nconst elementToRemove = document.getElementById(\"elementToRemove\");\nelementToRemove.parentNode.removeChild(elementToRemove); // 从父节点中移除节点\n```\n5. 复制节点\n复制节点\n```javascript\nconst original = document.getElementById(\"originalElement\");\nconst copy = original.cloneNode(true); // true 表示复制节点的子节点\n```\n6. 替换节点\n替换节点\n```javascript\nconst existing = document.getElementById(\"existingElement\");\nconst replacement = document.getElementById(\"replacementElement\");\nexisting.parentNode.replaceChild(replacement, existing);\n```\n7. 遍历节点\n遍历子节点\n```javascript\nconst parent = document.getElementById(\"parentElement\");\nconst children = parent.childNodes;\nfor (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    // 进行操作...\n}\n```\nNode 操作允许你在 HTML 文档中创建、获取、移动和删除节点，以及遍历节点树。\n\n## 事件处理\n\n\n事件处理是 JavaScript DOM 操作中的一个重要方面，它允许你在 HTML 元素上注册事件监听器，以便在特定事件发生时执行相应的操作。以下是有关事件处理的详细内容：\n\n1. 注册事件监听器\n使用 addEventListener 注册事件监听器\n```javascript\nconst element = document.getElementById(\"myElement\");\n\nelement.addEventListener(\"click\", function() {\n    // 在点击事件发生时执行的代码\n});\n```\n2. 常见事件类型\n以下是一些常见的事件类型：\n```js\n\"click\"：当元素被点击时触发。\n\"mouseover\"：当鼠标指针移动到元素上方时触发。\n\"mouseout\"：当鼠标指针从元素上方移开时触发。\n\"keydown\"：当键盘按键被按下时触发。\n\"keyup\"：当键盘按键被释放时触发。\n\"submit\"：当表单提交时触发。\n\"change\"：当表单元素的值发生改变时触发（适用于输入框、下拉列表等）。\n```\n3. 事件对象\n事件监听器的回调函数可以接收一个事件对象，该对象包含与事件相关的信息。例如：\n\n```javascript\nelement.addEventListener(\"click\", function(event) {\n    console.log(event.type); // 输出事件类型，如 \"click\"\n    console.log(event.target); // 输出触发事件的元素\n});\n```\n4. 阻止默认行为\n有时，你可能希望阻止事件的默认行为。例如，阻止表单提交或超链接跳转：\n\n```javascript\nelement.addEventListener(\"click\", function(event) {\n    event.preventDefault(); // 阻止默认行为\n});\n```\n5. 事件冒泡\n事件冒泡是指事件从最具体的元素（例如按钮）向最不具体的元素（例如文档）传播的过程。你可以使用 stopPropagation 方法停止事件冒泡：\n\n```javascript\nelement.addEventListener(\"click\", function(event) {\n    event.stopPropagation(); // 阻止事件冒泡\n});\n```\n6. 事件委托\n事件委托是一种将事件监听器添加到父元素而不是每个子元素的技术。这可以提高性能，并且对于动态生成的子元素非常有用。\n\n```javascript\nconst parent = document.getElementById(\"parentElement\");\n\nparent.addEventListener(\"click\", function(event) {\n    if (event.target.tagName === \"BUTTON\") {\n        // 在按钮被点击时执行操作\n    }\n});\n```\n7. 移除事件监听器\n要移除事件监听器，使用 removeEventListener 方法：\n\n```javascript\nconst element = document.getElementById(\"myElement\");\n\nfunction myHandler() {\n    // 事件处理逻辑\n}\n\nelement.addEventListener(\"click\", myHandler);\n\n// 在稍后的某个时刻移除监听器\nelement.removeEventListener(\"click\", myHandler);\n```\n\n\n\n\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 14,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-12T03:08:42.000+00:00",
        "updateTime": "2023-09-14T09:47:07.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1700845181969997825",
        "title": "前端学习之JavaScript-day01",
        "description": null,
        "content": "1. js 代码编写的位置 :\n    1. 内部js代码\n    2. 外部js代码\n    3. 行内js代码\n   4. 三种方式的优先级： 行内 > 内部 > 外部\n\n2. js变量的定义和使用\n    \n        1. var\n        2. let\n        3. const\n        4. 变量的使用： 变量名\n3. js数据类型\n    1. 基本数据类型\n        1. number\n        2. string\n        3. boolean\n        4. undefined\n        5. null\n    2. 引用数据类型\n        1. object\n        2. array\n        3. function\n        4. date\n        5. 正则表达式\n        6. Math\n        7. ...\n       8. 以上都是对象\n4. 运算符\n\n        1. ==  ===\n\n`==` 会自动转换数据类型，再比较值是否相等；\n\n`===` 不会自动转换数据类型,先比较数据类型，再比较值是否相等；\n\n       2. &&   ||\n    \n`&&` 逻辑与，两边都为真，结果为真，否则为假；\n\n总体为假,返回第一个的值；总体为真，返回第二个的值；\n   \n`||` 逻辑或，两边都为假，结果为假，否则为真；\n\n总体为真,返回第一个的值；总体为假，返回最后一个的值；\n    \n5. 函数的定义和调用(**重中之重**)\n\n  1. 普通函数定义\n   ```js\n    function 函数名(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n```\n2. 匿名函数的定义\n    ```js\n    var 函数名 = function(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    \n    //立即调用函数\n    (function(形式参数1, 形式参数2, ...) {\n         函数体;\n    })(实际参数1, 实际参数2, ...);\n    ```\n    3. 箭头函数的定义\n    \n    ```javascript\n    var 函数名 = (形式参数1, 形式参数2, ...) => {\n         函数体;\n    }\n    ```\n    \n    4. 函数调用： 函数名(实际参数);\n    ```javascript\n    function 函数名(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    函数名(实际参数1, 实际参数2, ...);\n    ```\n    \n    5. 理解到匿名函数的使用(难点)\n    ```javascript\n    // 普通使用\n    var 函数名 = function(形式参数1, 形式参数2, ...) {\n         函数体;\n    }\n    函数名(实际参数1, 实际参数2, ...);\n    \n    //函数作为参数使用\n    function fun() {\n         函数体;\n    }\n    \n    function fun2(fun) {\n         函数体;\n    }\n    ```\n    \n\n6. 构造函数/创建对象/对象的成员访问/字面式创建对象\n```javascript\n//构造函数\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n    this.say = function() {\n        console.log(\"我是\" + this.name + \",今年\" + this.age + \"岁了\");\n    }\n}\n// 创建对象\n// 构造函数的调用方式\nvar p1 = new Person(\"张三\", 18);\np1.say();\n// 字面量\nvar p2 = {\n    name: \"李四\",\n    age: 20,\n    say: function() {\n        console.log(\"我是\" + this.name + \",今年\" + this.age + \"岁了\");\n    }\n}\n// 对象的成员访问\np2.name;\np2.age;\n```\n\n6. 数组的定义(简写方式)\n```javascript\n// 定义数组\nvar arr = [1, 2, 3, 4, 5];\n```\n\n7. 数组的遍历(普通)\n```javascript\n// for i 循环\nfor (var i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n// for in 循环\nfor (var i in arr) {\n    console.log(arr[i]);\n}\n// forEach 循环\narr.forEach(function(value, index, array) {\n    console.log(value);\n});\n\n// map 循环\narr.map(function(value, index, array) {\n    console.log(value);\n});\n```\n\n9. 需要理解 forEach / map，从而理解匿名函数在开发中的使用\n```javascript\n// forEach 循环  ---->获取数组中的每一个元素\n// map 循环  ---->获取数组中的每一个元素,可以整体修改数组中的元素,并返回一个新的数组\n```\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 14,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-10T12:14:26.000+00:00",
        "updateTime": "2023-09-16T11:55:27.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "Javascript",
          "前端",
          "Java",
          "后端",
          "学习路线"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1700314161856225281",
        "title": "HTML 基础学习",
        "description": "常用标签",
        "content": "# HTML\n\nhtml 的结构 : 头,身体\nhtml 的语法 :\n\t\t\t\t\t标签/元素, 所有字母小写, 都应该是闭合\n\t\t\t\t\t属性,  属性和元素的关系   可以有多个, 多个之间使用空格分隔,属性值需要加引号(\"  ')\n\n**常用的元素**\n\n<table>\n  <tr align=\"center\"><th colspan='4'>结构标签</th></tr>\n  <tr>\n    <td>html</td>\n    <td>主标签</td></td>\n    <td>head</td>\n    <td>头标签</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>页面标题</td>\n    <td>body</td>\n    <td>主体标签</td>\n  </tr>\n</table>\n<table>\n  <tr align=\"center\"><th colspan='4'>常用标签</th></tr>\n    <tr>\n    <td>div</td>\n    <td>结构标签，占满一行，有换行</td>\n    <td>span</td>\n    <td>文本标签，不换行，宽由内容决定</td>\n  </tr>\n  <tr>\n    <td>p</td>\n    <td>段落标签，换行，行间距大</td>\n    <td>h1~h6</td>\n    <td>一号到六号标题</td>\n  </tr>\n  <tr>\n    <td>br</td>\n    <td>换行标签</td>\n    <td>hr</td>\n    <td>分割线标签</td>\n  </tr>\n</table>\n\n\n**今天的重点元素**\n\n| 标签描述                                                     | 标签     | 重要属性                        |\n| ------------------------------------------------------------ | -------- | ------------------------------- |\n| **超链接**                                                   | a        | href/name/target                |\n| **图片**                                                     | img      | src                             |\n| **表格**                                                     | table    | border/width/cell... = 0        |\n| 行                                                           | tr       | align                           |\n| 标题                                                         | th       | colspan,rowspan                 |\n| 普通列                                                       | td       | colspan,rowspan                 |\n|                                                              |          |                                 |\n| **表单**                                                     | form     | action/method(get,post)/enctype |\n| 文本框<br/>   密码框<br/>   隐藏域<br/>   单选框\tchecked<br/>   复选框\tchecked<br/>   上传控件<br/>   提交按钮<br/>   重置按钮<br/>   普通按钮 | input    | type/name/value<br/>            |\n| 下拉列表                                                     | select   | name                            |\n| 下拉选项                                                     | option   | value/selected                  |\n| 文本域                                                       | textarea | name                            |\n\n**记住: 标签的作用, 和对应的常见属性的作用**",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 18,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-09T01:04:21.000+00:00",
        "updateTime": "2023-09-14T00:52:38.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "HTML",
          "前端"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1699795353097838593",
        "title": "Spring 整合MyBatis",
        "description": "整合DAO层,实现事务管理",
        "content": "## Spring 整合MyBatis\n1. **作用**\n   1. 将SqlSessionFactory对象交给spring管理，从spring中直接去到mapper的对象\n2. **逻辑**\n\n   1. **数据库准备**\n   2. **创建maven项目加入maven依赖**\n   3. **创建实体类**\n   4. **创建mapper接口及mapper映射文件文件**\n   5. **创建mybatis主配置文件**\n   6. **创建Service接口及实现类**\n   7. **创建spring配置文件（声明mybatis对象交给spring创建）**\n      1. **数据源（dataSource）**\n      2. **SqlSessionFactory**\n      3. **声名自定义的mapper对象**\n      4. **声明自定义的service**\n      5. **在spring配置文中为service实现类添加事务管理**\n   8. **创建测试类，获取service对象，通过service对象完成对数据库的操作**\n\n\n3. **实例**\n   1. 需求：通过spring+mybatis实现简单的转账功能\n   2. **数据库准备**\n```sql\nCREATE TABLE `account` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `balance` decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n   3. **创建maven项目加入maven依赖**\n```java\n<dependencies>\n\t<!-- 数据库驱动 -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.28</version>\n        <scope>runtime</scope>\n    </dependency>\n    \n    <!-- 数据库连接池 -->\n    <dependency>\n    \t<groupId>com.alibaba</groupId>\n    \t<artifactId>druid</artifactId>\n    \t<version>1.1.9</version>\n    </dependency>\n    \n    <!-- MyBatis 相关 -->\n    <dependency>\n    \t<groupId>org.mybatis</groupId>\n    \t<artifactId>mybatis</artifactId>\n    \t<version>3.4.5</version>\n    </dependency>\n    \n    <!-- Spring 集成 MyBatis 的依赖 -->\n    <dependency>\n    \t<groupId>org.mybatis</groupId>\n    \t<artifactId>mybatis-spring</artifactId>\n    \t<version>1.3.1</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.slf4j</groupId>\n    \t<artifactId>slf4j-log4j12</artifactId>\n    \t<version>1.7.25</version>\n    </dependency>\n    \n    <!-- Spring 相关 -->\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-jdbc</artifactId>\n   \t\t<version>5.0.8.RELEASE</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.aspectj</groupId>\n   \t\t<artifactId>aspectjweaver</artifactId>\n    \t<version>1.8.13</version>\n    </dependency>\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-context</artifactId>\n    \t<version>5.0.8.RELEASE</version>\n    </dependency>\n    </dependencies>\n    \n    <!-- 测试相关 -->\n    <dependency>\n    \t<groupId>org.springframework</groupId>\n    \t<artifactId>spring-test</artifactId>\n    \t<version>5.0.8.RELEASE</version>\n    \t<scope>test</scope>\n    </dependency>\n    <dependency>\n    \t<groupId>junit</groupId>\n    \t<artifactId>junit</artifactId>\n    \t<version>4.12</version>\n    \t<scope>test</scope>\n    </dependency>\n    \n    <!-- 插件相关-->\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.22</version>\n        <scope>provided</scope>\n\t</dependency>\n\n</dependencies>\n```\n\n   4. **创建实体类**\n```java\n@Getter@Setter@ToString\n@AllArgsConstructor\n@NoArgsConstructor\n\npublic class Account {\n    private Long id;\n    private BigDecimal balance;\n}\n```\n\n   5. **创建mapper接口及mapper映射文件文件**\n```java\npublic interface AccountMapper {\n    //加钱,通过id添加账户的余额\n    void addBalance(@Param(\"id\") Long id, @Param(\"amount\") BigDecimal amount);\n    //减钱,通过id减少账户的余额，再添加到对应账户的余额中\n    void subtractBalance(@Param(\"id\") Long id, @Param(\"amount\") BigDecimal amount);\n}\n```\n```java\n<mapper namespace=\"cn.wolfcode.mapper.AccountMapper\">\n\t<!--加钱-->\n    <update id=\"addBalance\">\n        update account set balance = balance+#{amount} where id =#{id}\n    </update>\n\t<!--减钱-->\n    <update id=\"subtractBalance\">\n        update account set balance = balance-#{amount} where id =#{id}\n    </update>\n</mapper>\n```\n\n   6. **创建mybatis主配置文件**\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!--映射，注册和创建连接池，都会在spring的配置文件中创建，所以mapper主配置文件中不需要添加-->\n</configuration>\n```\n\n   7. **创建Service接口及实现类**\n```java\npublic interface IAccountService {\n    /**\n     * 转账\n     * @param inId 转入的账户id\n     * @param outId 转出的账户id\n     * @param amount 转账金额\n     */\n    void transfer(Long inId, Long outId, BigDecimal amount);\n}\n```\n```java\n@Service//通过业务层，连接持久层，形成分成管理\npublic class AccountServiceImpl implements IAccountService {\n\n    @Autowired\n    private AccountMapper mapper;//需要关联mapper对象才能对数据库做操作\n    @Override\n    public void transfer(Long inId, Long outId, BigDecimal amount) {\n        //一个业务,完成转账功能\n        mapper.addBalance(inId,amount);\n        mapper.subtractBalance(outId,amount);\n    }\n}\n```\n\n   8. **创建spring配置文件（声明mybatis对象交给spring创建）**\n      1. **数据源（dataSource）**\n```xml\n<!--连接池先关联文件,随时可以更换连接池-->\n<context:property-placeholder location=\"db.properties\"/>\n<!--创建连接池-->\n<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n  <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n  <property name=\"url\" value=\"${jdbc.url}\"/>\n  <property name=\"username\" value=\"${jdbc.username}\"/>\n  <property name=\"password\" value=\"${jdbc.password}\"/>\n</bean>\n```\n\n      2. **SqlSessionFactory**\n```xml\n<!--创建sqlSessionFactory对象-->\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <!--sqlSessionFactory需要连接池-->\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n  <!--类型的别名-->\n  <property name=\"typeAliasesPackage\" value=\"cn.wolfcode.domain\"/>\n  <!--mybatis主配置文件路径-->\n  <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\n  <!--mapper映射文件-->\n  <property name=\"mapperLocations\" value=\"classpath:cn/wolfcode/mapper/*Mapper.xml\"/>\n</bean>\n```\n\n      3. **声名自定义的mapper对象**\n```xml\n<!--AccountMapper对象-->\n<bean id=\"mapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n  <!--指定创建哪个mapper接口的对象,spring会用sqlSession创建mapper对象,-->\n  <property name=\"mapperInterface\" value=\"cn.wolfcode.mapper.AccountMapper\"/>\n  <!--spring会从sqlSessionFactory获取取sqlSession，所以我们需要指定sqlSessionFactory-->\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/>\n</bean>\n```\n\n      4. **声明自定义的service**\n```xml\n</bean>\n\t<!--service对象-->\n\t<bean id=\"service\" class=\"cn.wolfcode.service.impl.AccountServiceImpl\">\n\t<!--需要关联mapper属性-->\n  <property name=\"mapper\" ref=\"mapper\"/>\n</bean>\n```\n\n      5. **在spring配置文中为service实现类添加事务管理**\n```xml\n<!-- 配置事务管理器 WHAT -->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <!--需要关联连接池-->\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n\n<!-- 配置增强，加关联 WHAT transaction-manager指定spring的事务管理-->\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n  <tx:attributes>\n    <!-- 这里可以针对不同方法进行差异化配置 -->\n    <tx:method name=\"*\"/>\n  </tx:attributes>\n</tx:advice>\n\n<!--AOP织入-->\n<aop:config>\n  <!-- 配置切入点 WHERE -->\n  <aop:pointcut id=\"pc\" expression=\"execution(* cn.wolfcode.service.impl.*ServiceImpl.*(..))\"/>\n  <!-- 关联需要的增强 -->\n  <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pc\"/>\n</aop:config>\n```\n\n   9. **创建测试类，获取service对象，通过service对象完成对数据库的操作**\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext.xml\")\npublic class AccountServiceImplTest {\n    @Autowired\n    private IAccountService accountService;\n\n    @Test\n    public void testTransfer() {\n        accountService.transfer(2l,1l,new BigDecimal(\"1000\"));\n    }\n```\n\n4. **事务方法属性配置**\n| 属性 | 是否需要？ | 默认值 | 描述 |\n| --- | --- | --- | --- |\n| name | 是 |   | 与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。 如 |\n| propagation | 不 | REQUIRED | 事务传播行为 |\n| isolation | 不 | DEFAULT | 事务隔离级别 |\n| timeout | 不 | -1 | 事务超时的时间（以秒为单位） |\n| read-only | 不 | false | 事务是否只读？ |\n| rollback-for | 不 |   | 将被触发进行回滚的 Exception(s)；以逗号分开。  |\n| no-rollback-for | 不 |   | 不 被触发进行回滚的 Exception(s)；以逗号分开。  |\n\n5. **事务的注解 @Transactional**\n   1. 作用域\n\n- 贴业务类或业务接口上，事务的配置是通用与整个类或接口的的方法；\n- 贴业务方法上，即方法上的的事务的配置仅限于被贴的方法；\n- 同时存在时，后者覆盖前者。\n  :::\n\n      1. **实现：**\n         1. 在spring文件中配置\n```xml\n<!--事务注解扫描-->\n<bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\n<tx:annotation-driven transaction-manager=\"txManager\"/>\n```\n\n         2. 在业务层贴上注解\n```java\n@Transactional\npublic class AccountServiceImpl implements IAccountService {\n\t@Autowired\n\tprivate AccountMapper accountMapper;\n\n\t@Override\n\tpublic void transfer(Long outId, Long inId, BigDecimal amount) {\n\t\taccountMapper.subtractBalance(outId, amount);\n\t\tint i = 1/0;\n\t\taccountMapper.addBalance(inId, amount);\n\t}\n}\n```\n\n      2. 通用注解配置\n```java\n<tx:attributes> //从上往下依次匹配\n    <tx:method name=\"get*\" read-only=\"true\"/>\n    <tx:method name=\"list*\" read-only=\"true\"/>\n    <tx:method name=\"query*\" read-only=\"true\"/>\n    <tx:method name=\"count*\" read-only=\"true\"/>\n    <tx:method name=\"*\"/>\n</tx:attributes>\n```\n> **注意：**如果在spring文件中没有对业务层（**service对象**）和持久层（**mapper对象**）做对象管理，这时就不能贴注解\n> 可以手动添加。也可以为业务层和持久成贴注解\n\n```xml\n<!--添加IoC扫描-->\n<context:component-scan base-package=\"cn.wolfcode.service\"/>\n<!--添加ID扫描-->\n<context:annotation-config/>\n\n<!--mapper统一配置-->\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n  <property name=\"basePackage\" value=\"cn.wolfcode.mapper\"/>\n</bean>\n```\n\n6. **事务的传播规则（了解）**\n- **REQUIRED**：必须存在事务，如果当前存在一个事务，则加入该事务，否则将新建一个事务（默认）。\n- **SUPPORTS**：支持当前事务，指如果当前存在事务，就加入到该事务，如果当前没有事务，就以非事务方式执行。\n- MANDATORY：必须有事务，使用当前事务执行，如果当前没有事务，则抛出异常 IllegalTransactionStateException。\n- **REQUIRES_NEW**：不管当前是否存在事务，每次都创建新的事务\n- NOT_SUPPORTRD：以非事务方式执行，如果当前存在事务，就把当前事务暂停，以非事务方式执行\n- NEVER：不支持事务，如果当前存在是事务，则抛出异常，IllegalTransactionStateException\n- NESTED ：寄生事务，如果当前存在事务，则在内部事务内执行，如果当前不存在事务，则创建一个新的事务，嵌套事务使用数据库中的保存点来实现，即嵌套事务回滚不影响外部事务，但外部事务回滚将导致嵌套事务回滚。\n- DataSourceTransactionManager默认支持，而 HibernateTransactionManager 默认不支持，需要手动开启。\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 31,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-07T14:42:47.000+00:00",
        "updateTime": "2023-09-16T05:37:12.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "框架",
          "Spring"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1699231628989145089",
        "title": "Spring day-02-DI,IoC,AOP",
        "description": "IoC注解,DI注解,AOP--xml配置及注解配置",
        "content": "## DI 注解\n1. @Autowired：\n\n用于自动装配（自动注入）Bean的依赖关系。\n\n可以用在构造方法、Setter 方法、成员变量、方法上。\n\nSpring 会根据类型（或名称）自动寻找匹配的 Bean 并注入。\n\n\n```java\n@Component\npublic class MyService {\n    @Autowired @Setter\n    private MyMapper mapper;\n    \n}\n```\n2. @Value：\n\n用于注入属性值。\n\n可以注入基本数据类型、字符串、表达式等。\n\n```java\n@Value(\" xxx \")\nprivate String apiKey;\n\n```\n\n## IoC 注解\n@Component：\n用于声明一个类为 Spring 组件，会被 Spring 自动扫描并注册为 Bean。\n可以使用它来标记普通的 Java 类。\n\n```java\n@Component\npublic class MyComponent {\n    // ...\n}\n```\n\n@Service、@Repository、@Controller：\n\n这些是特定类型的组件注解，用于标记服务类、仓库类和控制器类。\nSpring 通常使用这些注解来更好地组织应用程序的不同层。\n\n```java\n@Service\npublic class MyService {\n    // ...\n}\n\n@Repository\npublic class MyRepository {\n    // ...\n}\n\n@Controller\npublic class MyController {\n    // ...\n}\n```\n\n## IoC 和DI 注解的扫描器\nDI扫描器可以不写,但建议都加上.\n\n```xml\n<!--使用 <context:component-scan> 扫描器配置组件扫描 (IoC 注解的扫描器)-->\n\n<context:component-scan base-package=\"com.example.myapp\"/>\n<!--在上面的示例中，base-package 属性指定了要扫描的基础包路径，\nSpring 会自动扫描该包及其子包下的类，将标记为组件的类注册为 Bean。-->\n\n\n\n<!--使用 <context:annotation-config> 启用注解驱动  DI注解的扫描器 -->\n\n<context:annotation-config/>\n<!--这个元素会告诉 Spring 启用注解处理器，\n以便解析和处理类中的注解，例如 @Autowired、@Value 等。-->\n\n```\n\n## AOP\nAOP（面向切面编程）是一种编程范式，它允许你在应用程序的不同模块中插入自定义的行为，而无需修改原始代码。AOP 的核心思想是通过将横切关注点（cross-cutting concerns）从主要业务逻辑中分离出来，然后将这些关注点模块化，以便重复使用。(增强功能,在指定类的指定方法上植入逻辑代码)\n\n\n具体操作: where(aspectJ的语法), when(before, after-returning, after-throwing), what(自行编写需要增强的功能代码)\n\n\n### xml配置文件织入事务管理器\nspring - xml 配置文件(推荐)\n```xml\n<!--做什么功能增强-->\n    <bean id=\"txManager\" class=\"xyz.bycor._03_aop.MyTransactionManager\"/>\n<!--  service  -->\n    <bean id=\"service\" class=\"xyz.bycor._03_aop.EmployeeServiceImpl\"/>\n    <!-- aop-->\n    <aop:config>\n        <aop:aspect ref=\"txManager\">\n            <!--在哪个类的哪个方法织入功能增强代码-->\n            <aop:pointcut id=\"txPointcut\" expression=\"execution(* xyz.bycor._03_aop.EmployeeServiceImpl.*(..))\"/>\n            <!-- 在这个方法运行前织入xxx代码-->\n            <aop:before method=\"begin\" pointcut-ref=\"txPointcut\"/>\n            <!-- 在这个方法运行后织入xxx代码-->\n            <aop:after-returning method=\"commit\" pointcut-ref=\"txPointcut\"/>\n            <!-- 在这个方法异常后织入xxx代码-->\n            <aop:after-throwing method=\"rollback\" pointcut-ref=\"txPointcut\"/>\n        </aop:aspect>\n    </aop:config>\n```\n### 注解\nxml 文件配置 -- 添加AOP 扫描器\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n<!--  ioc 扫描器  -->\n    <context:component-scan base-package=\"xyz.bycor._04_aop_annootion\"/>\n<!--  aop注解 扫描器  -->\n    <aop:aspectj-autoproxy />\n</beans>\n```\n\n要织入的增强java 代码示例:\n```java\n// 模拟事务管理器\n@Component  // 将织入的类交给Spring 管理\n@Aspect //表示切面\npublic class MyTransactionManager {\n    // 定义切入点\n    @Pointcut(\"execution(* xyz.bycor._04_aop_annootion.*ServiceImpl.*(..))\")\n    public void txPoint(){\n    }\n    @Before(\"txPoint()\")\n    public void begin(){\n        System.out.println(\"开启事务\");\n    }\n    @AfterReturning(\"txPoint()\")\n    public void commit(){\n        System.out.println(\"提交事务\");\n    }\n    @AfterThrowing(\"txPoint()\")\n    public void rollback(){\n        System.out.println(\"回滚事务\");\n    }\n}\n```\n\n\n\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 13,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-09-06T01:22:45.000+00:00",
        "updateTime": "2023-09-11T12:33:39.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it\uD83D\uDE23\uD83D\uDE23",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 7,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-09-16T14:29:19.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "框架",
          "交流社区",
          "后端"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "164",
    "size": "8",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "21"
  },
  "message": "ok"
}


